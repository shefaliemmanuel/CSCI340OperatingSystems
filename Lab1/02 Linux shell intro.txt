Shefali Emmanuel's Notes for August 22,2019

What is LINUX?
kernel, programs, shell, GUI
Pocket Guide p. 2

Using the shell

Point a Web browser to this Web-based LINUX emulator.
https://bellard.org/jslinux/

MAC users can open a UNIX command shell by running Terminal
Look under Applications -> Utilities. 
Or, press the key combination 'command + space' which will bring up Spotlight, then start typing Terminal and it will soon show up.

Type and run the following commands

date
cal
wc (word count)
ls -l
pwd (present working directory)
cat hello.c (print contents of the file)

Press the UP and DOWN arrow keys to browse through the history of past commands.
Press ENTER to re-run a past command.
This trick saves you typing.

Pocket Guide p. 3
Quick tutorial
https://ryanstutorials.net/linuxtutorial/commandline.php


Try typing these commands...
CAT hello.c
cat HELLO.C
What happens?
1st command fails because CAT is not a command
2nd fails because the file name is not HELLO.C
Is the LINUX shell case sensitive? 
yes


Text Editing with vi

https://ryanstutorials.net/linuxtutorial/vi.php

vi editor command quick guide
ESC - exit typing mode and enter a command
i   - insert new text
x   - overwrite existing text
:w   - save without exiting
:wq  - save and then exit to command console
:q!  - really quit without saving
arrow keys - navigate through document text

Example:

vi test.txt (create a file called test.txt)
The quick brown fox
jumped over the lazy dog

Save then exit back to the shell prompt.

cat test.txt

wc test.txt
wc -l test.txt
wc -w test.txt
wc -c test.txt

What do the three numbers reported by
the wc test.txt command represent?
-l 3 (lines)
-w 9 (words)
-c 45 (total count of bytes)

File and Folder Commands

Creating, managing files and folders
LINUX Pocket Guide p. 37-43
https://ryanstutorials.net/linuxtutorial/filemanipulation.php

Try the following sequence of commands.
What is the end result?
mkdir docs
ls

pwd
cd docs
ls

What does this command do?
cd .. (how you go back a folder)

Navigate back inside the docs folder.

Create two new folders inside of docs.
For example, food and fun

Navigate into the food folder and use vi to create a
quick text note that lists foods you will eat today.

Navigate into the fun folder and use vi to create a 
quick text note that lists fun stuff you'll do on the weekend.

Type this command to return to your root or home folder.
cd ~

Try this command to navigate into your food folder.
cd docs/food

Now that you're in the food folder, type this command
to jump into your fun folder.

cd /root/docs/fun

How did these two different ways to navigate folders differ?
they are different types of paths

What is an absolute path? you being with the root and go all the way down explicitly specifying everything
					ex: cd /root/docs/fun

What is a relative path? just you're standing where you're standing (directions only work if youre standing in that one place)
					ex:cd docs/food
Quick tutorial - navigating folders
https://ryanstutorials.net/linuxtutorial/navigation.php

Input/Output Redirection

cal > thisMonth.txt (convert the contents to a txt file)
mycommand >> outfile 

What is the difference between > and >> ?
					rewriting VS appending

What does the pipe | do? separates data and command
Run the cat and sort commands on a your text files.
cat eats.txt | sort
cat activities.txt | sort


Job Control

multitasking - running more than one program(job/process) at a time
foreground job - job that is running in the shell prompt...
   this job occupies the shell prompt so you cannot type
   another command.  The shell prompt will reappear when
   the foreground job completes.

# of core processor = # of jobs that can be done at the same time

background job - running in the shell, but not occupying
   the shell prompt so you are free to type another command.
suspend - to stop a foreground job temporarily
resume - to cause a suspended job to start running again

Try typing these commands.
What is the difference in what you observe?

sleep 3 (3 sec)

sleep 3 & (how to sleep on the back burner)

Try this...
sleep & 10

ps

Can you find the process (job) ID for the sleep job?

If it's still running try...

kill ID
(where ID is the integer ID of the sleep command)

Try this...
sleep 10

Press CTRL+Z (force kills program)

ps (processes)

Did CTRL+Z kill the sleep 10 command? yes

Bring it back to the foreground
fg ID
(ID is the id of the sleep command)


Quick tutorial
https://ryanstutorials.net/linuxtutorial/processes.php

Example.
mycommand &	launch and run command in background
                you will see a [N] appear, the integer N
                is the unique process or job ID.
                Commands directed towards a specific job
                take this ID as an argument.

Command		Result
-------------------------------

jobs		list your jobs
mycommand &	run a job in background
^Z		suspend current foreground job
fg %ID		unsuspend a job; bring to foreground
                if no args given, applies to most recent command

bg %ID		unsuspend a job; run it in background
                if no args given, applies to most recent command

Immediately kill the foreground job
^C

Exit/Close the shell console window
exit


------- Additional Reference ---------

File viewing commands
LINUX Pocket Guide p. 45-46

LINUX pocket guide p. 29-33

Command History

Use the up/down arrow keys to cycle through past commands.
Press ENTER to execute a retrieved past command

Command		Result
-------------------------------
history
history N	Show N most recent commands
history -c	clear history
!!		previous command
!N		command number N
!$		last parameter from previous command
!*		all parameters from previous command

Pocket Guide p. 29








Sequences of commands
command1; command2; command3

LINUX pocket guide p. 26





